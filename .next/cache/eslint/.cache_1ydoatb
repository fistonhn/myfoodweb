[{"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\admin\\adminpage.tsx":"1","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\admin\\createusers.tsx":"2","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\admin\\menueprint\\[menueid].tsx":"3","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\admin\\report\\index.tsx":"4","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\auth\\[...nextauth].ts":"5","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\category\\updatecategoryfinalwage.ts":"6","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\create.ts":"7","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\getallcontractors.ts":"8","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\getavailablebyitem.ts":"9","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\getFreeContractorsUsingCategoryId.ts":"10","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\getOtherItemsContractors.ts":"11","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\removeContractorFromCategory.ts":"12","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\search.ts":"13","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\updatecategorycontractor.ts":"14","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\updateContractorUsingSelectedOne.ts":"15","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\updatesinglecontractor.ts":"16","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\uploaddocuments.ts":"17","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\hello.ts":"18","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\menue\\create.ts":"19","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\menue\\getdata.ts":"20","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\menue\\getsinglemenue.ts":"21","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\menue\\seniorclerksearch.ts":"22","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\menue\\seniorclerkupdatemenue.ts":"23","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\operation\\updateoperationmenue.ts":"24","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\places\\create.ts":"25","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\places\\getall.ts":"26","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\report\\tofromdatewages.ts":"27","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\report\\totalbookings.ts":"28","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\user\\createusers.ts":"29","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\user\\deleteuser.ts":"30","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\user\\getusers.ts":"31","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\user\\resetuser.ts":"32","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\wage\\querymenues.ts":"33","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\wage\\updatewages.ts":"34","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\booking\\index.tsx":"35","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\index.tsx":"36","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\operation\\index.tsx":"37","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\order.tsx":"38","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\wage\\edit\\[menueid].tsx":"39","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\wage\\index.tsx":"40","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\_app.tsx":"41","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\_document.tsx":"42","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Admin\\GetContractorsModal\\GetContractorModal.tsx":"43","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Admin\\MenueTable.tsx":"44","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Admin\\TotalBookingComponent.tsx":"45","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Auth\\CreateUserTable\\EditModal.tsx":"46","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Auth\\CreateUserTable\\index.tsx":"47","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Auth\\CreateUserTable\\Modal.tsx":"48","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Button\\Button.tsx":"49","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\ContractorModel\\ContractorModel.tsx":"50","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Excel\\Excel.tsx":"51","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Header\\Header.tsx":"52","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Inputs\\Input.tsx":"53","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\menueprintpage\\MenuePrintLayout.tsx":"54","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\menueprintpage\\TopPrintSection.tsx":"55","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\operation\\OperationMenueTable.tsx":"56","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\orderpage\\SeniorClerkEdit.tsx":"57","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\orderpage\\SeniorClerkTable.tsx":"58","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\orderpage\\services.ts":"59","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\orderpage\\UploadMenueExcelFile.tsx":"60","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\reportPage\\ContractorSearch.tsx":"61","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\reportPage\\ContractorSearchTable.tsx":"62","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\reportPage\\DateSearch.tsx":"63","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\reportPage\\utils.ts":"64","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\reportPage\\WageSearch.tsx":"65","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\reportPage\\WageSearchTable.tsx":"66","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Select\\index.tsx":"67","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Wage\\WageMenueLayout.tsx":"68","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Wage\\WageTable.tsx":"69","C:\\Users\\hp\\Desktop\\food-web-v2\\lib\\prismaclient.ts":"70"},{"size":8285,"mtime":1681423140000,"results":"71","hashOfConfig":"72"},{"size":4292,"mtime":1680184014000,"results":"73","hashOfConfig":"72"},{"size":1559,"mtime":1681497724000,"results":"74","hashOfConfig":"72"},{"size":3038,"mtime":1680183906000,"results":"75","hashOfConfig":"72"},{"size":2127,"mtime":1680030626000,"results":"76","hashOfConfig":"72"},{"size":925,"mtime":1679582666000,"results":"77","hashOfConfig":"72"},{"size":1038,"mtime":1681422910000,"results":"78","hashOfConfig":"72"},{"size":658,"mtime":1680095782000,"results":"79","hashOfConfig":"72"},{"size":1225,"mtime":1679572090000,"results":"80","hashOfConfig":"72"},{"size":2115,"mtime":1681249666000,"results":"81","hashOfConfig":"72"},{"size":2179,"mtime":1681302426000,"results":"82","hashOfConfig":"72"},{"size":1291,"mtime":1681299496000,"results":"83","hashOfConfig":"72"},{"size":1043,"mtime":1680118974000,"results":"84","hashOfConfig":"72"},{"size":2209,"mtime":1679577242000,"results":"85","hashOfConfig":"72"},{"size":981,"mtime":1681253276000,"results":"86","hashOfConfig":"72"},{"size":1195,"mtime":1681389638000,"results":"87","hashOfConfig":"72"},{"size":1843,"mtime":1680095366000,"results":"88","hashOfConfig":"72"},{"size":307,"mtime":1677760598000,"results":"89","hashOfConfig":"72"},{"size":8010,"mtime":1681497694000,"results":"90","hashOfConfig":"72"},{"size":3777,"mtime":1680178796000,"results":"91","hashOfConfig":"72"},{"size":957,"mtime":1681303672000,"results":"92","hashOfConfig":"72"},{"size":1453,"mtime":1680208400000,"results":"93","hashOfConfig":"72"},{"size":1490,"mtime":1680693568000,"results":"94","hashOfConfig":"72"},{"size":923,"mtime":1680182226000,"results":"95","hashOfConfig":"72"},{"size":895,"mtime":1680621416000,"results":"96","hashOfConfig":"72"},{"size":625,"mtime":1680621806000,"results":"97","hashOfConfig":"72"},{"size":1850,"mtime":1680104762000,"results":"98","hashOfConfig":"72"},{"size":1160,"mtime":1680622984000,"results":"99","hashOfConfig":"72"},{"size":1711,"mtime":1680183096000,"results":"100","hashOfConfig":"72"},{"size":982,"mtime":1679431670000,"results":"101","hashOfConfig":"72"},{"size":1005,"mtime":1680030736000,"results":"102","hashOfConfig":"72"},{"size":1445,"mtime":1680183132000,"results":"103","hashOfConfig":"72"},{"size":1327,"mtime":1680125256000,"results":"104","hashOfConfig":"72"},{"size":1218,"mtime":1680174880000,"results":"105","hashOfConfig":"72"},{"size":1159,"mtime":1680787648000,"results":"106","hashOfConfig":"72"},{"size":2005,"mtime":1680183660000,"results":"107","hashOfConfig":"72"},{"size":6975,"mtime":1680184666000,"results":"108","hashOfConfig":"72"},{"size":15207,"mtime":1681388014000,"results":"109","hashOfConfig":"72"},{"size":1481,"mtime":1681645849647,"results":"110","hashOfConfig":"72"},{"size":3283,"mtime":1681387128000,"results":"111","hashOfConfig":"72"},{"size":607,"mtime":1681247270000,"results":"112","hashOfConfig":"72"},{"size":231,"mtime":1677760598000,"results":"113","hashOfConfig":"72"},{"size":4276,"mtime":1681299406000,"results":"114","hashOfConfig":"72"},{"size":8792,"mtime":1681251900000,"results":"115","hashOfConfig":"72"},{"size":6625,"mtime":1680622952000,"results":"116","hashOfConfig":"72"},{"size":3362,"mtime":1680692172000,"results":"117","hashOfConfig":"72"},{"size":5881,"mtime":1680262312000,"results":"118","hashOfConfig":"72"},{"size":1009,"mtime":1679415598000,"results":"119","hashOfConfig":"72"},{"size":559,"mtime":1677949668000,"results":"120","hashOfConfig":"72"},{"size":13086,"mtime":1681523004000,"results":"121","hashOfConfig":"72"},{"size":9484,"mtime":1679411400000,"results":"122","hashOfConfig":"72"},{"size":3596,"mtime":1681392708000,"results":"123","hashOfConfig":"72"},{"size":911,"mtime":1680968920000,"results":"124","hashOfConfig":"72"},{"size":7627,"mtime":1681498216000,"results":"125","hashOfConfig":"72"},{"size":4342,"mtime":1681337598000,"results":"126","hashOfConfig":"72"},{"size":9618,"mtime":1681303334000,"results":"127","hashOfConfig":"72"},{"size":3409,"mtime":1680633152000,"results":"128","hashOfConfig":"72"},{"size":14826,"mtime":1680693582000,"results":"129","hashOfConfig":"72"},{"size":0,"mtime":1680615032000,"results":"130","hashOfConfig":"72"},{"size":8090,"mtime":1680649318000,"results":"131","hashOfConfig":"72"},{"size":3067,"mtime":1680261142000,"results":"132","hashOfConfig":"72"},{"size":2289,"mtime":1680213612000,"results":"133","hashOfConfig":"72"},{"size":2655,"mtime":1680624066000,"results":"134","hashOfConfig":"72"},{"size":710,"mtime":1680105884000,"results":"135","hashOfConfig":"72"},{"size":3605,"mtime":1680118544000,"results":"136","hashOfConfig":"72"},{"size":2281,"mtime":1680105900000,"results":"137","hashOfConfig":"72"},{"size":1074,"mtime":1680635196000,"results":"138","hashOfConfig":"72"},{"size":13560,"mtime":1681415960000,"results":"139","hashOfConfig":"72"},{"size":7356,"mtime":1680177152000,"results":"140","hashOfConfig":"72"},{"size":363,"mtime":1680695270000,"results":"141","hashOfConfig":"72"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},"1jgb9mn",{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255"},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259"},{"filePath":"260","messages":"261","suppressedMessages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263"},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","suppressedMessages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","suppressedMessages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","suppressedMessages":"275","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276"},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","suppressedMessages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","suppressedMessages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","suppressedMessages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","suppressedMessages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","suppressedMessages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304"},{"filePath":"305","messages":"306","suppressedMessages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","suppressedMessages":"310","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311"},{"filePath":"312","messages":"313","suppressedMessages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","suppressedMessages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"318","messages":"319","suppressedMessages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","suppressedMessages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324"},{"filePath":"325","messages":"326","suppressedMessages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"328","messages":"329","suppressedMessages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","suppressedMessages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"334","messages":"335","suppressedMessages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","suppressedMessages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","suppressedMessages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","suppressedMessages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","suppressedMessages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","suppressedMessages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"352","messages":"353","suppressedMessages":"354","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355"},{"filePath":"356","messages":"357","suppressedMessages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359"},{"filePath":"360","messages":"361","suppressedMessages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\admin\\adminpage.tsx",["363","364"],[],"import { Header } from '@/components/Header/Header'\r\nimport { getMenuesApi, IUploadContractorApi, uploadContractor } from '@/providers/apis'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Menue } from '@prisma/client'\r\nimport { handleApiErrors } from '@/utils/handleapierrors'\r\nimport { MenueTable } from '@/components/Admin/MenueTable'\r\nimport { Button } from '@/components/Button/Button'\r\nimport * as  xlsx from 'xlsx'\r\nimport { Contractor } from \"@prisma/client\"\r\nimport Input from '@/components/Inputs/Input'\r\nimport Dialog from '@mui/material/Dialog'\r\nimport DialogContent from '@mui/material/DialogContent'\r\nimport DialogTitle from '@mui/material/DialogTitle'\r\nimport { ContractorModel } from '@/components/ContractorModel/ContractorModel'\r\nimport { GetServerSideProps } from 'next'\r\nimport { getSession } from 'next-auth/react'\r\nimport { convertJSONintoExcelFile } from '@/utils/convertJSONintoExcelFile'\r\nimport { useAppSelector } from '@/store'\r\nconst AdminPage = () => {\r\n    const menueState = useAppSelector(s => s.menue)\r\n    const [startDate, setstartDate] = useState(\"\")\r\n    const [endDate, setendDate] = useState(\"\")\r\n    const [contractorNameSearch, setcontractorNameSearch] = useState(\"\")\r\n    const [searchDepartureDate, setsearchDepartureDate] = useState(\"\")\r\n    const [disableContractorEdit, serdisableContractorEdit] = useState(true)\r\n    const [menuesData, setmenuesData] = useState<Menue[]>([])\r\n    const [menueSearch, setmenueSearch] = useState<string>(\"\")\r\n    const [contractorDialogeState, setcontractorDialogeState] = useState(false)\r\n    const getMenueData = async (search = \"\") => {\r\n        try {\r\n            if (search || (startDate && endDate) || searchDepartureDate || contractorNameSearch) {\r\n                const menues = await getMenuesApi({\r\n                    search: search, startDate: startDate, endDate: endDate,\r\n                    departureDate: searchDepartureDate,\r\n                    contractorName: contractorNameSearch\r\n                })\r\n                setmenuesData(menues.data.menues)\r\n            } else {\r\n                const menues = await getMenuesApi({})\r\n                setmenuesData(menues.data.menues)\r\n            }\r\n        } catch (error: any) {\r\n            return handleApiErrors(error.message)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getMenueData()\r\n    }, [])\r\n    useEffect(() => {\r\n        getMenueData()\r\n    }, [menueState.refetchData])\r\n    const handleExcelJsonData = async (data: Contractor[]) => {\r\n        let updatedData = [] as Omit<Contractor, \"id\" | \"documents\">[]\r\n        const prevDate = new Date()\r\n        prevDate.setDate(prevDate.getDate() - 1)\r\n        data.forEach((d) => {\r\n            updatedData.push({\r\n                name: String(d.name),\r\n                item: String(d.item),\r\n                age: Number(d.age),\r\n                wage: Number(d.wage),\r\n                group: String(d.group),\r\n                assignTillDate: new Date(prevDate),\r\n                area: String(d.area),\r\n                address: String(d.address),\r\n                identitynumber: String(d.identitynumber),\r\n                phone: String(d.phone),\r\n            })\r\n        })\r\n        try {\r\n            const res = await uploadContractor({\r\n                contractors: updatedData\r\n            })\r\n            alert(res.data.msg)\r\n        } catch (error: any) {\r\n            const err = handleApiErrors(error)\r\n            alert(err)\r\n        }\r\n    }\r\n    const handleFileChange = (_e: React.ChangeEvent<HTMLInputElement>) => {\r\n        _e.preventDefault();\r\n        if (_e.target.files) {\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                const data = e.target?.result;\r\n                const workbook = xlsx.read(data, { type: \"array\" });\r\n                const sheetName = workbook.SheetNames[0];\r\n                const worksheet = workbook.Sheets[sheetName];\r\n                const json = xlsx.utils.sheet_to_json(worksheet);\r\n                handleExcelJsonData(json as any)\r\n                _e.target.value = \"\"\r\n            };\r\n            reader.readAsArrayBuffer(_e.target.files[0]);\r\n        }\r\n    }\r\n    const handleConvertJSONToExcel = () => {\r\n        try {\r\n            const data = [] as any[]\r\n            menuesData.forEach(v => {\r\n                data.push({\r\n                    ...v,\r\n                    serviceTime: new Date(v.serviceTime).toLocaleTimeString(),\r\n                    departureTime: new Date(v.departureTime).toLocaleTimeString(),\r\n                    functionDate: new Date(v.functionDate).toLocaleDateString(),\r\n                    departureDate: new Date(v.departureDate).toLocaleDateString()\r\n\r\n                })\r\n            })\r\n            convertJSONintoExcelFile(data, \"MENUE DATA\")\r\n        } catch (error: any) {\r\n            alert(error.message)\r\n        }\r\n    }\r\n    const manuetable = () => {\r\n        return (\r\n            <div className='px-5 space-y-2'>\r\n                <div className='flex items-center gap-2'>\r\n                    <Button title='Upload Contractor Staff' className=' relative'>\r\n                        <input type=\"file\" className='absolute inset-0 opacity-0' onChange={handleFileChange} />\r\n                    </Button>\r\n                    <Button title='View Contuctors' onClick={() => {\r\n                        serdisableContractorEdit(true)\r\n                        setcontractorDialogeState(true)\r\n                    }} />\r\n                </div>\r\n                <div className='flex items-center space-x-4'>\r\n                    <Input label='Start Date' onChange={(e) => { setstartDate(e.target.value) }} type='date' value={startDate} />\r\n                    <Input label='End Date' onChange={(e) => { setendDate(e.target.value) }} type='date' value={endDate} />\r\n                </div>\r\n                <div className='flex items-center'>\r\n                    <Input type='date' label='Departure Date' value={searchDepartureDate}\r\n                        onChange={(e) => { setsearchDepartureDate(e.target.value) }}\r\n                    />\r\n                </div>\r\n                <div className='flex items-center gap-2'>\r\n                    <Input placeholder='Search...' value={menueSearch} onChange={(e) => { setmenueSearch(e.target.value) }} />\r\n                    <Button title='Search' onClick={() => {\r\n                        getMenueData(menueSearch)\r\n                    }} />\r\n                    <Button title='Download' onClick={handleConvertJSONToExcel} />\r\n                    <Button\r\n                        title='Reset'\r\n                        onClick={() => {\r\n                            setsearchDepartureDate(\"\")\r\n                            setstartDate(\"\")\r\n                            setendDate(\"\")\r\n                            setmenueSearch(\"\")\r\n                            getMenueData()\r\n                        }}\r\n                    />\r\n                </div>\r\n                <MenueTable menues={menuesData} />\r\n            </div>\r\n        )\r\n    }\r\n    const handleContractorClose = () => {\r\n        setcontractorDialogeState(false)\r\n    }\r\n    const contractorModals = () => {\r\n        return (\r\n            <Dialog fullWidth maxWidth=\"md\" open={contractorDialogeState} onClose={handleContractorClose}>\r\n                <DialogTitle>CONTRACTORS</DialogTitle>\r\n                <DialogContent>\r\n                    <ContractorModel allowEdit={disableContractorEdit} />\r\n                </DialogContent>\r\n            </Dialog>\r\n        )\r\n    }\r\n    return (\r\n        <div style={{\r\n            backgroundImage: `url(\"/bg3.jpg\")`,\r\n            backgroundAttachment: \"fixed\",\r\n            backgroundSize: \"cover\"\r\n        }}\r\n            className=\"h-screen overflow-auto\"\r\n        >\r\n            <Header />\r\n            {manuetable()}\r\n            {contractorModals()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdminPage\r\n\r\nexport const getServerSideProps: GetServerSideProps = async (ctx) => {\r\n    const session = await getSession(ctx)\r\n    if (!session || session.user.role !== \"admin\") {\r\n        return {\r\n            redirect: {\r\n                destination: \"/\",\r\n                permanent: false,\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        props: {}\r\n    }\r\n}\r\n\r\n","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\admin\\createusers.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\admin\\menueprint\\[menueid].tsx",["365"],[],"import { Button } from '@/components/Button/Button'\r\nimport { MenuePrintLayout } from '@/components/menueprintpage/MenuePrintLayout'\r\nimport prisma from '@/lib/prismaclient'\r\nimport { getSingleMenue } from '@/providers/apis'\r\nimport { handleApiErrors } from '@/utils/handleapierrors'\r\nimport { Categories, Contractor, Menue } from '@prisma/client'\r\nimport { GetServerSideProps } from 'next'\r\nimport React, { useEffect, useState } from 'react'\r\ntype IMenue = (Menue & {\r\n    Categories: (Categories & {\r\n        contractor: Contractor | null;\r\n    })[];\r\n}) | null\r\ninterface MenuePrintProp {\r\n    id: string\r\n}\r\nconst MenuePrint = ({ id }: MenuePrintProp) => {\r\n    const [menue, setmenue] = useState<IMenue | null>(null)\r\n\r\n    const getsinglemenue = async () => {\r\n        try {\r\n            const res = await getSingleMenue(id)\r\n            setmenue(res.data.menue)\r\n        } catch (error: any) {\r\n            const err = handleApiErrors(error)\r\n            alert(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (id) {\r\n            getsinglemenue()\r\n        }\r\n    }, [id])\r\n    return (\r\n        <div>\r\n            {\r\n                !menue ?\r\n                    <div>Loading...</div>\r\n                    :\r\n                    <MenuePrintLayout menue={menue} />\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default MenuePrint;\r\n\r\nexport const getServerSideProps: GetServerSideProps<MenuePrintProp> = async (ctx) => {\r\n    const id = ctx.query.menueid as string\r\n    return {\r\n        props: {\r\n            id: id\r\n        }\r\n    }\r\n}\r\n","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\admin\\report\\index.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\auth\\[...nextauth].ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\category\\updatecategoryfinalwage.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\create.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\getallcontractors.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\getavailablebyitem.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\getFreeContractorsUsingCategoryId.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\getOtherItemsContractors.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\removeContractorFromCategory.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\search.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\updatecategorycontractor.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\updateContractorUsingSelectedOne.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\updatesinglecontractor.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\contractor\\uploaddocuments.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\hello.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\menue\\create.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\menue\\getdata.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\menue\\getsinglemenue.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\menue\\seniorclerksearch.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\menue\\seniorclerkupdatemenue.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\operation\\updateoperationmenue.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\places\\create.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\places\\getall.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\report\\tofromdatewages.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\report\\totalbookings.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\user\\createusers.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\user\\deleteuser.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\user\\getusers.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\user\\resetuser.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\wage\\querymenues.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\api\\wage\\updatewages.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\booking\\index.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\index.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\operation\\index.tsx",["366"],[],"import { Header } from '@/components/Header/Header'\r\nimport { getMenuesApi, IUploadContractorApi, uploadContractor } from '@/providers/apis'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Menue } from '@prisma/client'\r\nimport { handleApiErrors } from '@/utils/handleapierrors'\r\nimport { MenueTable } from '@/components/Admin/MenueTable'\r\nimport { Button } from '@/components/Button/Button'\r\nimport * as  xlsx from 'xlsx'\r\nimport { Contractor } from \"@prisma/client\"\r\nimport Input from '@/components/Inputs/Input'\r\nimport Dialog from '@mui/material/Dialog'\r\nimport { ContractorModel } from '@/components/ContractorModel/ContractorModel'\r\nimport { GetServerSideProps } from 'next'\r\nimport { getSession } from 'next-auth/react'\r\nimport { convertJSONintoExcelFile } from '@/utils/convertJSONintoExcelFile'\r\nimport { OperationMenueTable } from '@/components/operation/OperationMenueTable'\r\nconst OperationPage = () => {\r\n    const [startDate, setstartDate] = useState(\"\")\r\n    const [endDate, setendDate] = useState(\"\")\r\n    const [contractorNameSearch, setcontractorNameSearch] = useState(\"\")\r\n    const [searchDepartureDate, setsearchDepartureDate] = useState(\"\")\r\n    const [disableContractorEdit, serdisableContractorEdit] = useState(true)\r\n    const [menuesData, setmenuesData] = useState<Menue[]>([])\r\n    const [menueSearch, setmenueSearch] = useState<string>(\"\")\r\n    const [contractorDialogeState, setcontractorDialogeState] = useState(false)\r\n    const getMenueData = async (search = \"\") => {\r\n        try {\r\n            if (search || (startDate && endDate) || searchDepartureDate || contractorNameSearch) {\r\n                const menues = await getMenuesApi({\r\n                    search: search, startDate: startDate, endDate: endDate,\r\n                    departureDate: searchDepartureDate,\r\n                    contractorName: contractorNameSearch\r\n                })\r\n                setmenuesData(menues.data.menues)\r\n            } else {\r\n                const menues = await getMenuesApi({})\r\n                setmenuesData(menues.data.menues)\r\n            }\r\n        } catch (error: any) {\r\n            return handleApiErrors(error.message)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getMenueData()\r\n    }, [])\r\n    const handleExcelJsonData = async (data: Contractor[]) => {\r\n        let updatedData = [] as Omit<Contractor, \"id\" | \"documents\">[]\r\n        const prevDate = new Date()\r\n        prevDate.setDate(prevDate.getDate() - 1)\r\n        data.forEach((d) => {\r\n            console.log({ d })\r\n            updatedData.push({\r\n                name: String(d.name),\r\n                item: String(d.item),\r\n                age: Number(d.age),\r\n                wage: Number(d.wage),\r\n                group: String(d.group),\r\n                assignTillDate: new Date(prevDate),\r\n                area: String(d.area),\r\n                address: String(d.address),\r\n                identitynumber: String(d.identitynumber),\r\n                phone: String(d.phone)\r\n            })\r\n        })\r\n        try {\r\n\r\n            const res = await uploadContractor({\r\n                contractors: updatedData\r\n            })\r\n            alert(res.data.msg)\r\n        } catch (error: any) {\r\n            const err = handleApiErrors(error)\r\n            alert(err)\r\n        }\r\n    }\r\n    const handleFileChange = (_e: React.ChangeEvent<HTMLInputElement>) => {\r\n        _e.preventDefault();\r\n        if (_e.target.files) {\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                const data = e.target?.result;\r\n                const workbook = xlsx.read(data, { type: \"array\" });\r\n                const sheetName = workbook.SheetNames[0];\r\n                const worksheet = workbook.Sheets[sheetName];\r\n                const json = xlsx.utils.sheet_to_json(worksheet);\r\n                handleExcelJsonData(json as any)\r\n                _e.target.value = \"\"\r\n            };\r\n            reader.readAsArrayBuffer(_e.target.files[0]);\r\n        }\r\n    }\r\n    const handleConvertJSONToExcel = () => {\r\n        try {\r\n            const data = [] as any[]\r\n            menuesData.forEach(v => {\r\n                data.push({\r\n                    ...v,\r\n                    serviceTime: new Date(v.serviceTime).toLocaleTimeString(),\r\n                    departureTime: new Date(v.departureTime).toLocaleTimeString(),\r\n                    functionDate: new Date(v.functionDate).toLocaleDateString(),\r\n                    departureDate: new Date(v.departureDate).toLocaleDateString()\r\n\r\n                })\r\n            })\r\n            convertJSONintoExcelFile(data, \"MENUE DATA\")\r\n        } catch (error: any) {\r\n            alert(error.message)\r\n        }\r\n    }\r\n    const manuetable = () => {\r\n        return (\r\n            <div className='px-5 space-y-2'>\r\n                <div className='flex items-center space-x-4'>\r\n                    <Input label='Start Date' onChange={(e) => { setstartDate(e.target.value) }} type='date' value={startDate} />\r\n                    <Input label='End Date' onChange={(e) => { setendDate(e.target.value) }} type='date' value={endDate} />\r\n                </div>\r\n\r\n                <div className='flex items-center gap-2'>\r\n                    <Button title='Search' onClick={() => {\r\n                        getMenueData(menueSearch)\r\n                    }} />\r\n                    <Button title='Download' onClick={handleConvertJSONToExcel} />\r\n                    <Button title='Reset' onClick={() => {\r\n                        setstartDate(\"\")\r\n                        setendDate(\"\")\r\n                        setmenueSearch(\"\")\r\n                        getMenueData()\r\n                    }} />\r\n                </div>\r\n                <OperationMenueTable menues={menuesData} />\r\n            </div>\r\n        )\r\n    }\r\n    const handleContractorClose = () => {\r\n        setcontractorDialogeState(false)\r\n    }\r\n    const contractorModals = () => {\r\n        return (\r\n            <Dialog fullWidth maxWidth=\"md\" open={contractorDialogeState} onClose={handleContractorClose}>\r\n                <ContractorModel allowEdit={disableContractorEdit} />\r\n            </Dialog>\r\n        )\r\n    }\r\n    return (\r\n        <div style={{\r\n            backgroundImage: `url(\"/bg3.jpg\")`,\r\n            backgroundAttachment: \"fixed\",\r\n            backgroundSize: \"cover\"\r\n        }}\r\n            className=\"h-screen overflow-auto\"\r\n        >\r\n            <Header />\r\n            {manuetable()}\r\n            {contractorModals()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OperationPage\r\n\r\n\r\nexport const getServerSideProps: GetServerSideProps = async (ctx) => {\r\n    const session = await getSession(ctx)\r\n\r\n    if (!session || (session.user.role !== \"admin\" && session.user.role !== \"operationclerk\")) {\r\n        return {\r\n            redirect: {\r\n                destination: \"/\",\r\n                permanent: false,\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        props: {}\r\n    }\r\n}","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\order.tsx",["367","368"],[],"import { Header } from '@/components/Header/Header'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Menue } from '@prisma/client'\r\nimport Input from '@/components/Inputs/Input'\r\nimport { Select } from '@/components/Select'\r\nimport { itemsData } from '@/data/data'\r\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\r\nimport IconButton from '@mui/material/IconButton'\r\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\r\nimport { Button } from '@/components/Button/Button'\r\nimport { IMenueForm } from '@/types/order'\r\nimport { handleApiErrors } from '@/utils/handleapierrors'\r\nimport { createMenueApi } from '@/providers/apis'\r\nimport { updateDateWithHourAndMinute } from '@/utils/updateDateWithHoursAndMinutes'\r\nimport { GetServerSideProps } from 'next'\r\nimport { getSession, useSession } from 'next-auth/react'\r\nimport { v4 as uuid } from 'uuid'\r\nimport { Autocomplete } from '@mui/material'\r\nimport TextField from '@mui/material/TextField'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { SeniorClerkEdit } from '@/components/orderpage/SeniorClerkEdit'\r\nimport { UploadMenueExcelFile } from '@/components/orderpage/UploadMenueExcelFile'\r\nconst intitialData = {\r\n  bookedBy: \"\",\r\n  bookerMobileNumber: \"\",\r\n  bookingId: \"\",\r\n  cleaner: \"\",\r\n  departureDate: \"\",\r\n  departureTime: \"\",\r\n  driverName: \"\",\r\n  function: \"breakfast\",\r\n  functionDate: \"\",\r\n  headMobileNumber: \"\",\r\n  headName: \"\",\r\n  mobile: \"\",\r\n  name: \"\",\r\n  PAX: \"\",\r\n  serviceTime: \"\",\r\n  specialInstruction: \"\",\r\n  vehicleNumber: \"\",\r\n  venue: \"\",\r\n  words: \"\",\r\n  onion: false,\r\n  garlic: false\r\n} as IMenueForm\r\nconst functionOptions = [\r\n  {\r\n    value: \"breakfast\",\r\n    content: \"breakfast\"\r\n  },\r\n  {\r\n    value: \"dinner\",\r\n    content: \"dinner\"\r\n  },\r\n  {\r\n    value: \"hightea\",\r\n    content: \"hightea\"\r\n  }, {\r\n    value: \"lunch\",\r\n    content: \"lunch\"\r\n  }\r\n] as { value: Menue[\"function\"], content: React.ReactNode }[]\r\nconst Order = () => {\r\n  const { data: session } = useSession()\r\n  const [itemsNameOnly, setitemsNameOnly] = useState<string[]>([])\r\n  const [formData, setformData] = useState(intitialData)\r\n  const [searchedItemsResult, setsearchedItemsResult] = useState<{ title: string, item: string }[]>([])\r\n  const [selectedItems, setselectedItems] = useState<{ item: string, counter: string, comment: string }[]>([])\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n    const { name, value } = e.target\r\n    setformData({\r\n      ...formData,\r\n      [name]: value\r\n    })\r\n  }\r\n  const handleSearchItem = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const toReturn = [] as { title: string, item: string }[]\r\n    if (!e.target.value) {\r\n      setsearchedItemsResult([])\r\n      return;\r\n    }\r\n    itemsData.forEach(v => {\r\n      v.sub.forEach(item => {\r\n        if (item.title.toLowerCase().includes(e.target.value.toLowerCase())) {\r\n          toReturn.push({\r\n            item: item.title,\r\n            title: v.title\r\n          })\r\n        }\r\n      })\r\n    })\r\n    setsearchedItemsResult(toReturn)\r\n  }\r\n\r\n  const informationForm = () => {\r\n    return (\r\n      <div className='grid grid-cols-2 w-[60%] mx-auto gap-5'>\r\n        <Input required label='Function Date' name='functionDate' onChange={handleChange} value={formData.functionDate} type=\"date\" />\r\n        <Input required label='PAX' name='PAX' onChange={handleChange} value={formData.PAX} type=\"text\" />\r\n        <Input required label='Booked By' name='bookedBy' onChange={handleChange} value={formData.bookedBy} type=\"text\" />\r\n\r\n        <Input required label='Booker Mobile Number' name='bookerMobileNumber' onChange={handleChange} value={formData.bookerMobileNumber} type=\"text\" />\r\n        <Input required label='Cleaner' name='cleaner' onChange={handleChange} value={formData.cleaner} type=\"text\" />\r\n        <Input required label='Departure Date' name='departureDate' onChange={handleChange} value={formData.departureDate} type=\"date\" />\r\n        <Input required label='Departure Time' name='departureTime' onChange={handleChange} value={formData.departureTime} type=\"time\" />\r\n        <Input required label='Driver Name' name='driverName' onChange={handleChange} value={formData.driverName} type=\"text\" />\r\n        <Select required label='Function' name='function' onChange={handleChange} value={formData.function} options={functionOptions} />\r\n\r\n        <Input required label='Head Mobile Number' name='headMobileNumber' onChange={handleChange} value={formData.headMobileNumber} type=\"text\" />\r\n        <Input required label='Head Name' name='headName' onChange={handleChange} value={formData.headName} type=\"text\" />\r\n        <Input required label='Mobile' name='mobile' onChange={handleChange} value={formData.mobile} type=\"text\" />\r\n        <Input required label='Name' name='name' onChange={handleChange} value={formData.name} type=\"text\" />\r\n        <Input required label='Service Time' name='serviceTime' onChange={handleChange} value={formData.serviceTime} type=\"time\" />\r\n        <Input required label='Special Instruction' name='specialInstruction' onChange={handleChange} value={formData.specialInstruction} type=\"text\" />\r\n        <Input required label='Vehicle Number' name='vehicleNumber' onChange={handleChange} value={formData.vehicleNumber} type=\"text\" />\r\n        <Input required label='Venue' name='venue' onChange={handleChange} value={formData.venue} type=\"text\" />\r\n        <Input required label='Words' name='words' onChange={handleChange} value={formData.words} type=\"text\" />\r\n        <Select required label='Onion' onChange={(e) => { setformData((prev) => ({ ...prev, onion: e.target.value === \"true\" ? true : false })) }} value={String(formData.onion)} options={[{ content: \"false\", value: \"false\" }, { content: \"true\", value: \"true\" }]} />\r\n        <Select required label='Garlic' onChange={(e) => { setformData((prev) => ({ ...prev, garlic: e.target.value === \"true\" ? true : false })) }} value={String(formData.garlic)} options={[{ content: \"false\", value: \"false\" }, { content: \"true\", value: \"true\" }]} />\r\n      </div>\r\n    )\r\n  }\r\n  const itemSearchComponent = () => {\r\n    return (\r\n      <div className='relative'>\r\n        <Input\r\n          className='w-[30%]'\r\n          endIcon={\r\n            <div className='flex items-center space-x-3'>\r\n              <ExpandMoreIcon />\r\n              {\r\n                searchedItemsResult.length > 0 &&\r\n                <IconButton onClick={() => {\r\n                  setsearchedItemsResult([])\r\n                }}>\r\n                  <CloseIcon />\r\n                </IconButton>\r\n              }\r\n            </div>\r\n          }\r\n          label='Search Items' onFocus={(e) => {\r\n            const toReturn = [] as { title: string, item: string }[]\r\n            if (e.target.value) {\r\n              return;\r\n            }\r\n            itemsData.forEach(v => {\r\n              v.sub.forEach(item => {\r\n                toReturn.push({\r\n                  item: item.title,\r\n                  title: v.title\r\n                })\r\n              })\r\n            })\r\n            setsearchedItemsResult(toReturn)\r\n          }} onChange={handleSearchItem} />\r\n        {\r\n          (searchedItemsResult.length !== 0) &&\r\n          <div className='bg-white p-2 mt-2 rounded h-[300px] overflow-auto'>\r\n            {\r\n              searchedItemsResult.map((val, index) => (\r\n                <div className='flex items-center'>\r\n                  <h1 className='border p-1 flex-1 bg-white rounded-md'>{val.item}</h1>\r\n                  <IconButton onClick={() => {\r\n                    const obj = {\r\n                      item: val.item,\r\n                      counter: \"0\",\r\n                      comment: \"\",\r\n                    }\r\n                    setselectedItems([...selectedItems, obj])\r\n                  }}>\r\n                    <AddCircleOutlineIcon />\r\n                  </IconButton>\r\n                </div>\r\n              ))\r\n            }\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n  const handleChangeFormData = (index: number, e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n    const { value, name } = e.target\r\n    const newData = [...selectedItems].map((v, i) => {\r\n      if (index === i) {\r\n        return {\r\n          ...v,\r\n          [name]: value\r\n        }\r\n      }\r\n      return v;\r\n    })\r\n    setselectedItems(newData)\r\n  }\r\n  const handleDeleteSelectedItems = (index: number) => {\r\n    const updated = [] as {\r\n      item: string;\r\n      counter: string;\r\n      comment: string;\r\n    }[]\r\n    selectedItems.forEach((v, i) => {\r\n      if (i !== index) {\r\n        updated.push(v)\r\n      }\r\n    })\r\n    setselectedItems(updated)\r\n  }\r\n  const renderSelectedItems = () => {\r\n    return (\r\n      <div className=\"w-full mb-8 overflow-hidden rounded-lg shadow-lg bg-white\">\r\n        <div className=\"w-full overflow-x-auto\">\r\n          <table className=\"w-full\">\r\n            <thead>\r\n              <tr className=\"text-md font-semibold tracking-wide text-left text-gray-900 bg-gray-100 uppercase border-b border-gray-600\">\r\n                <th className=\"px-4 py-3 uppercase\">no.</th>\r\n                <th className=\"px-4 py-3 uppercase\">item</th>\r\n                <th className=\"px-4 py-3 uppercase whitespace-nowrap\">counter</th>\r\n                <th className=\"px-4 py-3 uppercase\">comment</th>\r\n                <th className=\"px-4 py-3 uppercase\">actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white\">\r\n              {\r\n                selectedItems.map((item, index) => (\r\n                  <tr key={index} className=\"text-gray-700\">\r\n                    <td className=\"px-4 py-3 border\">\r\n                      {index + 1}\r\n                    </td>\r\n                    <td className=\"px-4 py-3 border\">\r\n                      {item.item}\r\n                    </td>\r\n                    <td className=\"px-4 py-3 border\">\r\n                      <input name='counter' type={\"number\"} value={item.counter} onChange={(e) => {\r\n\r\n                        handleChangeFormData(index, e)\r\n                      }} className=\"w-[100px] outline-none border p-1\" />\r\n                    </td>\r\n                    <td className=\"px-4 py-3 border\">\r\n                      <textarea name='comment' className='outline-none border p-1' onChange={(e) => { handleChangeFormData(index, e) }} placeholder='Enter Comments...' value={item.comment} />\r\n                    </td>\r\n                    <td className=\"px-4 py-3 border\">\r\n                      <IconButton onClick={() => { handleDeleteSelectedItems(index) }}>\r\n                        <DeleteForeverIcon className='text-red-700' />\r\n                      </IconButton>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  const handleSubmitForm = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    let isOkay = true\r\n    let isGreaterThanFive = false\r\n    selectedItems.forEach(v => {\r\n      if (!v.counter || (Number(v.counter) <= 0 || Number(v.counter) > 5)) {\r\n        isOkay = false\r\n      }\r\n    })\r\n    if (!isOkay) {\r\n      return alert(\"kindly select number of counters for all items and maximum of 5.\")\r\n    }\r\n    formData.bookingId = String(uuid()).substring(0, 8)\r\n    if (selectedItems.length === 0) {\r\n      return alert(\"Kindly Select Atleast One Item.\")\r\n    }\r\n    console.log({ selectedItems, formData })\r\n    try {\r\n      // _formDate.\r\n      const _departureHourMinute = formData.departureTime.split(\":\")\r\n      const _departureTime = updateDateWithHourAndMinute(new Date(formData.departureDate), Number(_departureHourMinute[0]), Number(_departureHourMinute[1]))\r\n      // \r\n      const _serviceHourMinute = formData.serviceTime.split(\":\")\r\n      const _serviceTime = updateDateWithHourAndMinute(new Date(formData.functionDate), Number(_serviceHourMinute[0]), Number(_serviceHourMinute[1]))\r\n\r\n      const res = await createMenueApi({\r\n        formdata: {\r\n          bookedBy: formData.bookedBy,\r\n          bookerMobileNumber: formData.bookerMobileNumber,\r\n          bookingId: formData.bookingId,\r\n          cleaner: formData.cleaner,\r\n          departureDate: new Date(formData.departureDate),\r\n          departureTime: new Date(_departureTime),\r\n          driverName: formData.driverName,\r\n          function: formData.function,\r\n          functionDate: new Date(formData.functionDate),\r\n          headMobileNumber: formData.headMobileNumber,\r\n          headName: formData.headName,\r\n          mobile: formData.mobile,\r\n          name: formData.name,\r\n          PAX: formData.PAX,\r\n          serviceTime: _serviceTime,\r\n          specialInstruction: formData.specialInstruction,\r\n          vehicleNumber: formData.vehicleNumber,\r\n          venue: formData.venue,\r\n          words: formData.words,\r\n          id: \"\",\r\n          onion: formData.onion !== undefined ? formData.onion : null,\r\n          garlic: formData.garlic !== undefined ? formData.garlic : null\r\n        },\r\n        selectedItems: selectedItems\r\n      })\r\n      alert(\"created successfully!\")\r\n      window.location.href = `/admin/menueprint/${res.data.id}`\r\n    } catch (error: any) {\r\n      const err = handleApiErrors(error)\r\n      alert(err)\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    if (itemsData) {\r\n      let _sub = [] as string[]\r\n      itemsData.forEach(it => {\r\n        it.sub.forEach(c => {\r\n          _sub.push(c.title)\r\n        })\r\n      })\r\n      setitemsNameOnly(_sub)\r\n    }\r\n  }, [itemsData])\r\n  return (\r\n    <div style={{\r\n      backgroundImage: `url(\"/bg3.jpg\")`,\r\n      backgroundAttachment: \"fixed\",\r\n      backgroundSize: \"cover\"\r\n    }}\r\n      className=\"h-screen overflow-auto\">\r\n      <form onSubmit={handleSubmitForm} >\r\n        <Header />\r\n        {informationForm()}\r\n        <div className='grid gap-5 w-[90%] mx-auto   mt-10 pb-10'>\r\n          {itemSearchComponent()}\r\n          {renderSelectedItems()}\r\n          <div className='space-x-3'>\r\n            <Button title='Submit' type='submit' />\r\n            <Button onClick={() => {\r\n              window.open(`mailto:`);\r\n            }} title='Email' type='button' />\r\n          </div>\r\n        </div>\r\n      </form>\r\n      {\r\n        session?.user.role === \"admin\" &&\r\n        (\r\n          <div className='mb-40'>\r\n            <UploadMenueExcelFile />\r\n            <SeniorClerkEdit />\r\n          </div>\r\n        )\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Order\r\n\r\n\r\nexport const getServerSideProps: GetServerSideProps = async (ctx) => {\r\n  const session = await getSession(ctx)\r\n  if (!session) {\r\n    return {\r\n      redirect: {\r\n        destination: \"/\",\r\n        permanent: false,\r\n      }\r\n    }\r\n  }\r\n  if (session.user.role === \"operationclerk\") {\r\n    return {\r\n      redirect: {\r\n        destination: \"/operation\",\r\n        permanent: false,\r\n      }\r\n    }\r\n  }\r\n  if (session.user.role === \"wageclerk\") {\r\n    return {\r\n      redirect: {\r\n        destination: \"/wage\",\r\n        permanent: false,\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    props: {}\r\n  }\r\n}","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\wage\\edit\\[menueid].tsx",["369"],[],"import { WageMenueLayout } from '@/components/Wage/WageMenueLayout';\r\nimport prisma from '@/lib/prismaclient';\r\nimport { getSingleMenue } from '@/providers/apis';\r\nimport { handleApiErrors } from '@/utils/handleapierrors';\r\nimport { Categories, Contractor, Menue } from '@prisma/client';\r\nimport { GetServerSideProps } from 'next'\r\nimport React, { useState } from 'react'\r\n\r\ntype IMenue = (Menue & {\r\n    Categories: (Categories & {\r\n        contractor: Contractor | null;\r\n    })[];\r\n}) | null\r\ninterface WageEditProp {\r\n    id: string\r\n}\r\nconst WageEdit = ({\r\n    id\r\n}: WageEditProp) => {\r\n    const [menue, setmenue] = useState<IMenue>(null)\r\n    const getsinglemenue = async () => {\r\n        try {\r\n            const res = await getSingleMenue(id)\r\n            setmenue(res.data.menue)\r\n        } catch (error: any) {\r\n            const err = handleApiErrors(error)\r\n            alert(err)\r\n        }\r\n    }\r\n    React.useEffect(() => {\r\n        if (id) {\r\n            getsinglemenue()\r\n        }\r\n    }, [id])\r\n    return (\r\n        <div>\r\n            {\r\n                !menue ?\r\n                    <div>loading...</div>\r\n                    :\r\n                    <WageMenueLayout menue={menue} />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WageEdit\r\n\r\nexport const getServerSideProps: GetServerSideProps<WageEditProp> = async (ctx) => {\r\n    const id = ctx.query.menueid as string\r\n    return {\r\n        props: {\r\n            id: id\r\n        }\r\n    }\r\n}\r\n","C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\wage\\index.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\_app.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\pages\\_document.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Admin\\GetContractorsModal\\GetContractorModal.tsx",["370"],[],"import { useAppDispatch, useAppSelector } from '@/store'\r\nimport React from 'react'\r\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Checkbox, CircularProgress } from '@mui/material'\r\nimport { Button } from '@/components/Button/Button'\r\nimport { setSelectedToUpdateUserId, toggleUpdateContractorModal, updateContractorThunk, fetchOtherItemsContractorsThunk } from '@/slices/contractors.slice'\r\nimport { Contractor } from '@prisma/client'\r\nimport { handleApiErrors } from '@/utils/handleapierrors'\r\nimport { removeContractorFromCategoryAPI } from '@/providers/apis'\r\n\r\nconst GetContractorModal = () => {\r\n    const dispatch = useAppDispatch()\r\n    const contractorState = useAppSelector(s => s.contractor)\r\n    const onClose = () => {\r\n        dispatch(toggleUpdateContractorModal())\r\n    }\r\n    const handleUpdateSelectedContractor = () => {\r\n        dispatch(updateContractorThunk({ categoryID: contractorState.contractorCategoryID, contractorID: contractorState.selectedToUpdateUserId }))\r\n    }\r\n    const handleGetOtherContractors = () => {\r\n        dispatch(fetchOtherItemsContractorsThunk(contractorState.contractorCategoryID))\r\n    }\r\n    const handleDeleteCurrentContractor = async () => {\r\n        try {\r\n            if (!contractorState.contractorCategoryID) {\r\n                return alert(\"Kindly try again later.\")\r\n            }\r\n            await removeContractorFromCategoryAPI({\r\n                categoryID: contractorState.contractorCategoryID\r\n            })\r\n            alert(\"Contractor removed successfully.\")\r\n        } catch (error: any) {\r\n            const err = handleApiErrors(error)\r\n            alert(err)\r\n        }\r\n    }\r\n    return (\r\n        <Dialog maxWidth=\"md\" fullWidth onClose={onClose} open={contractorState.showUpdateContractorModal}>\r\n            <DialogTitle>Edit Contractors</DialogTitle>\r\n            {\r\n                contractorState.loadingContractors ?\r\n                    <div className='flex items-center justify-center'>\r\n                        < CircularProgress />\r\n                    </div>\r\n                    :\r\n                    <DialogContent>\r\n                        {\r\n                            contractorState.updatedSuccessfullyMessage &&\r\n                            <h1 className='text-center font-bold text-green-600'>{contractorState.updatedSuccessfullyMessage}</h1>\r\n                        }\r\n                        <div>\r\n                            {\r\n                                contractorState.contractors.length > 0 ?\r\n                                    contractorState.contractors.map((c, ci) => (\r\n                                        <ContractorItem {...c} />\r\n                                    ))\r\n                                    :\r\n                                    <h1 className='text-center fonbold text-red-600 '>No Contractors available</h1>\r\n\r\n                            }\r\n                        </div>\r\n                    </DialogContent>\r\n            }\r\n            <DialogActions>\r\n                <Button onClick={handleGetOtherContractors} title='GET OTHER CONTRACTORS' className='bg-green-700' />\r\n                <Button onClick={handleDeleteCurrentContractor} title='REMOVE CURRENT CONTRACTOR' className='text-red-200 bg-red-700' />\r\n                <Button\r\n                    title='CANCEL'\r\n                    onClick={() => {\r\n                        dispatch(toggleUpdateContractorModal())\r\n                    }}\r\n                />\r\n                <Button onClick={handleUpdateSelectedContractor} title='UPDATE' />\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport { GetContractorModal }\r\n\r\n\r\nconst ContractorItem = (c: Contractor) => {\r\n    const cstate = useAppSelector(s => s.contractor)\r\n    const dispatch = useAppDispatch()\r\n    return (\r\n        <div className='flex justify-between'>\r\n            <div className='flex items-center'>\r\n                <Checkbox\r\n                    onChange={() => {\r\n                        dispatch(setSelectedToUpdateUserId({ userId: c.id }))\r\n                    }}\r\n                    checked={cstate.selectedToUpdateUserId === c.id}\r\n                />\r\n                <h1>{c.name}</h1>\r\n            </div>\r\n            <h1>{c.item}</h1>\r\n        </div>\r\n    )\r\n}","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Admin\\MenueTable.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Admin\\TotalBookingComponent.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Auth\\CreateUserTable\\EditModal.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Auth\\CreateUserTable\\index.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Auth\\CreateUserTable\\Modal.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Button\\Button.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\ContractorModel\\ContractorModel.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Excel\\Excel.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Header\\Header.tsx",["371","372"],[],"import { GetServerSideProps } from 'next'\r\nimport { getSession, signOut, useSession } from 'next-auth/react'\r\nimport Link from 'next/link'\r\nimport React from 'react'\r\ninterface IHeader {\r\n    onlyLogo?: boolean\r\n    className?: string\r\n}\r\nconst Header = ({ onlyLogo, className }: IHeader) => {\r\n    const { data: session } = useSession()\r\n\r\n    return (\r\n        <div className={className}>\r\n            <div className='flex items-center justify-evenly cursor-pointer uppercase '>\r\n                <div className='flex items-center flex-wrap gap-5'>\r\n                    {\r\n                        !onlyLogo &&\r\n                        <>\r\n                            <h1 onClick={() => {\r\n                                window.location.href = \"/\"\r\n                            }} className='text-white hover:text-primary font-bold'>Home</h1>\r\n\r\n                            <h1 onClick={() => {\r\n                                window.location.href = \"/admin/createusers\"\r\n                            }} className='text-white hover:text-primary font-bold'>Create Roles</h1>\r\n\r\n                            <h1 onClick={() => {\r\n                                window.location.href = \"/admin/report\"\r\n                            }} className='text-white hover:text-primary font-bold'>Report</h1>\r\n                            <h1 onClick={() => {\r\n                                window.location.href = \"/booking\"\r\n                            }} className='text-white hover:text-primary font-bold'>Bookings</h1>\r\n                        </>\r\n                    }\r\n                </div>\r\n                <div className='' onClick={() => { window.location.href = \"/order\" }}>\r\n                    <img src='/logo.png' className='w-[200px] h-[200px] object-contain' />\r\n                </div>\r\n                <div className='flex items-center flex-wrap gap-5'>\r\n                    {\r\n                        !onlyLogo &&\r\n                        <>\r\n                            {\r\n                                session?.user.role === \"admin\" &&\r\n                                <h1 onClick={() => {\r\n                                    window.location.href = \"/admin/adminpage\"\r\n                                }} className='text-white hover:text-primary font-bold'>Admin</h1>\r\n                            }\r\n                            <h1 onClick={() => {\r\n                                window.location.href = \"/wage\"\r\n                            }} className='text-white hover:text-primary font-bold'>Wage Page</h1>\r\n                            <h1 onClick={() => {\r\n                                window.location.href = \"/operation\"\r\n                            }} className='text-white hover:text-primary font-bold'>Operation</h1>\r\n                            <h1 className=' font-bold text-white hover:text-primary' onClick={() => {\r\n                                signOut()\r\n                            }}>logout</h1>\r\n                        </>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"flex items-center flex-col text-white\">\r\n                <h2 className=\" font-semibold text-3xl \">\r\n                    Reserve Menu & Catering\r\n                </h2>\r\n                <h5 className=\" font-semibold text-xl \">XYZ place Pin: 1234567</h5>\r\n                {\r\n                    !onlyLogo &&\r\n                    <>\r\n                        <p>abc@gmail.com</p>\r\n                        <span>Contact: 1234567</span>\r\n                    </>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { Header }\r\n","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Inputs\\Input.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\menueprintpage\\MenuePrintLayout.tsx",["373"],[],"import { Categories, Contractor, Menue } from '@prisma/client';\r\nimport React from 'react'\r\nimport { Button } from '../Button/Button';\r\nimport { TopPrintSection } from './TopPrintSection';\r\nimport { CLEANER_CONST, HEAD_CONST } from '@/constants/globalconstants';\r\n\r\ntype IMenue = (Menue & {\r\n    Categories: (Categories & {\r\n        contractor: Contractor | null;\r\n    })[];\r\n})\r\n\r\nconst MenuePrintLayout = ({ menue }: { menue: IMenue }) => {\r\n    const [tableData, settableData] = React.useState<{\r\n        comment: string[],\r\n        contractors: string[],\r\n        itemName: string\r\n    }[]>\r\n        ([])\r\n    function convertCategoriesToResult(categories: (Categories & {\r\n        contractor: Contractor | null;\r\n    })[]) {\r\n        const result = [] as {\r\n            comment: string[],\r\n            contractors: string[],\r\n            itemName: string\r\n        }[]\r\n        categories.forEach((category) => {\r\n            const existingCategory = result.find((c) => c.itemName === category.itemName);\r\n            const { contractor } = category\r\n            let _conts = []\r\n            if (contractor?.name) {\r\n                _conts.push(contractor?.name)\r\n            }\r\n            if (existingCategory) {\r\n                existingCategory.comment.push(category.comment);\r\n                existingCategory.contractors = [...existingCategory.contractors, ..._conts]\r\n            } else {\r\n                const { itemName, comment } = category;\r\n                const newCategory = {\r\n                    itemName,\r\n                    comment: [comment],\r\n                    contractors: _conts,\r\n                };\r\n                result.push(newCategory);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (menue) {\r\n            const data = convertCategoriesToResult(menue.Categories)\r\n            settableData(data)\r\n        }\r\n    }, [menue])\r\n    return (\r\n        <div className='border-2 border-black m-2'>\r\n            <TopPrintSection menue={menue} />\r\n            <div className=\"w-full mb-8 overflow-hidden rounded-lg shadow-lg bg-white\">\r\n                <div className=\"w-full overflow-x-auto\">\r\n                    <table className=\"w-full\">\r\n                        <thead>\r\n                            <tr\r\n                                className=\"text-md font-semibold tracking-wide text-left\r\n                            text-gray-900 bg-gray-100 uppercase border-2 border-black\"\r\n                            >\r\n                                <th className=\"px-4 py-3 uppercase text-center\">S.NO.</th>\r\n                                <th className=\"px-4 py-3 uppercase text-center\">Item name</th>\r\n                                <th className=\"px-4 py-3 uppercase text-center\">name of staff</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className=\"bg-white font-semibold\">\r\n                            {\r\n                                tableData.filter(f => (f.itemName !== HEAD_CONST && f.itemName !== CLEANER_CONST)).map((c, ci) => (\r\n                                    <tr className=\"\">\r\n                                        <td className=\"px-1 py-2 border-2 border-black\">\r\n                                            {ci + 1}\r\n                                        </td>\r\n                                        <td className=\"px-1 py-2 border-2 border-black \">\r\n                                            <div className=''>\r\n                                                {c.itemName}({c.comment.length})-  <span className='text-sm'>{c.comment[0]} </span>\r\n                                            </div>\r\n                                        </td>\r\n                                        <td className=\"px-1 py-2 border-2 border-black\">\r\n                                            CONTRACTORS: {c.contractors.map((cont, i) => `${cont} ${i < c.contractors.length - 1 ? \",\" : \"\"}`)}\r\n\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            <tr className=\"\">\r\n                                <td className=\"px-4 py-3 border-2 border-black\">\r\n\r\n                                </td>\r\n                                <td className=\"px-4 py-3 border-2 border-black\">\r\n\r\n                                </td>\r\n                                <td className=\"px-4 py-3 border-2 border-black\">\r\n\r\n                                </td>\r\n                            </tr>\r\n                            <tr className=\"\">\r\n                                <td className=\"px-4 py-3 border-2 border-black\">\r\n\r\n                                </td>\r\n                                <td className=\"px-4 py-3 border-2 border-black\">\r\n\r\n                                </td>\r\n                                <td className=\"px-4 py-3 border-2 border-black\">\r\n\r\n                                </td>\r\n                            </tr>\r\n                            <tr className=\"\">\r\n                                <td className=\"px-4 py-3 border-2 border-black\">\r\n\r\n                                </td>\r\n                                <td className=\"px-4 py-3 border-2 border-black\">\r\n\r\n                                </td>\r\n                                <td className=\"px-4 py-3 border-2 border-black\">\r\n\r\n                                </td>\r\n                            </tr>\r\n                            <tr className=\"\">\r\n                                <td className=\"px-4 py-3 border-2 border-black\">\r\n\r\n                                </td>\r\n                                <td className=\"px-4 py-3 border-2 border-black\">\r\n\r\n                                </td>\r\n                                <td className=\"px-4 py-3 border-2 border-black\">\r\n\r\n                                </td>\r\n                            </tr>\r\n                            <tr className=\"\">\r\n                                <td className=\"px-1 py-3 border-2 border-black\">\r\n                                    BOOKED BY:\r\n                                </td>\r\n                                <td className=\"px-1 py-3 border-2 border-black\">\r\n                                    {menue.bookedBy}\r\n                                </td>\r\n                                <td className=\"px-1 py-3 border-2 border-black\">\r\n                                    WORDS:-  {menue.words}\r\n                                </td>\r\n                            </tr>\r\n                            <tr className=\"\">\r\n                                <td className=\"px-1 py-3 border-2 border-black\">\r\n                                    MOBILE NO:\r\n                                </td>\r\n                                <td className=\"px-1 py-3 border-2 border-black\">\r\n                                    {menue.mobile}\r\n                                </td>\r\n                                <td className=\"px-1 py-3 border-2 border-black\">\r\n                                    CLEANER:-  {menue.cleaner}\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <h1 className='text-xl text-center tracking-tight mb-10'>\r\n                Thank You 👏\r\n            </h1>\r\n            <div className='w-full p-2'>\r\n                <Button className=' w-full m-auto' title='PRINT' onClick={() => {\r\n                    window.print()\r\n                }} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { MenuePrintLayout }","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\menueprintpage\\TopPrintSection.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\operation\\OperationMenueTable.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\orderpage\\SeniorClerkEdit.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\orderpage\\SeniorClerkTable.tsx",["374"],[],"import React, { useEffect, useState } from 'react'\r\nimport { Menue, Categories, Contractor } from '@prisma/client'\r\nimport Dialoge from '@mui/material/Dialog'\r\nimport { handleApiErrors } from '@/utils/handleapierrors'\r\nimport { getAvailableContractorsWithItem, updateCatgoryContractor } from '@/providers/apis'\r\nimport DialogTitle from '@mui/material/DialogTitle'\r\nimport CheckBox from '@mui/material/Checkbox'\r\nimport { DialogActions } from '@mui/material'\r\nimport { Button } from '../Button/Button'\r\nimport Input from '../Inputs/Input'\r\nimport { updateOperationMenueApi } from '@/providers/apis/operation'\r\nimport { updateSeniorClekMenueApi } from '@/providers/apis/order'\r\nimport { Select } from '../Select'\r\nimport { functionsConstants } from '@/data/data'\r\nimport { ISODateIntoLocalDate } from '@/utils/ISODateToLocalDate'\r\nimport { ISODateIntoLocalTime } from '@/utils/ISODateToLocalTime'\r\nimport { updateDateWithHourAndMinute } from '@/utils/updateDateWithHoursAndMinutes'\r\n\r\ninterface ICategories extends Categories {\r\n    contractor?: Contractor\r\n}\r\ninterface IMenue extends Menue {\r\n    Categories?: ICategories[]\r\n}\r\ninterface MenueTableProp {\r\n    menues: IMenue[]\r\n}\r\ninterface IModal {\r\n    open: boolean\r\n    onClose: () => void\r\n    category?: Categories\r\n}\r\nconst UpdateContractorsModal = ({ onClose, open, category }: IModal) => {\r\n    const [contractors, setcontractors] = useState<Contractor[]>([])\r\n    const [selectedContractor, setselectedContractor] = useState<Contractor>()\r\n    const getContractores = async () => {\r\n        try {\r\n            const res = await getAvailableContractorsWithItem({ item: category?.itemName! })\r\n            setcontractors(res.data.contractors)\r\n            console.log({ setselectedContractores: res.data.contractors })\r\n        } catch (error: any) {\r\n            const err = handleApiErrors(error)\r\n            alert(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (category?.itemName) {\r\n            getContractores()\r\n        }\r\n    }, [category?.itemName])\r\n    const handleUpdate = async () => {\r\n        if (!selectedContractor) {\r\n            return alert(\"Kindly select one contractor.\")\r\n        }\r\n        if (!category) {\r\n            return;\r\n        }\r\n        try {\r\n            const res = await updateCatgoryContractor({\r\n                categoryId: category.id,\r\n                contractorid: selectedContractor.id\r\n            })\r\n            alert(res.data.msg)\r\n        } catch (error: any) {\r\n            const err = handleApiErrors(error)\r\n            alert(err)\r\n        }\r\n    }\r\n    return (\r\n        <Dialoge open={open} maxWidth=\"md\" fullWidth onClose={onClose}>\r\n            <DialogTitle>\r\n                Available Contractors\r\n            </DialogTitle>\r\n            {\r\n                contractors.map((c, ci) => (\r\n                    <div key={ci} className=\"flex items-center space-x-2\">\r\n                        <CheckBox checked={c.id === selectedContractor?.id} onChange={() => {\r\n                            setselectedContractor(c)\r\n                        }} />\r\n                        <h1 className='text-lg font-bold'>{c.name}</h1>\r\n                    </div>\r\n                ))\r\n            }\r\n            <DialogActions>\r\n                <div className='flex space-x-2'>\r\n                    <Button title='Cancel' onClick={onClose} />\r\n                    <Button title='Update' onClick={handleUpdate} />\r\n                </div>\r\n            </DialogActions>\r\n        </Dialoge>\r\n    )\r\n}\r\nconst SeniorClerkTable = ({ menues }: MenueTableProp) => {\r\n    const [updateDialoge, setupdateDialoge] = useState(false)\r\n    const [selectedContractores, setselectedContractores] = useState<Contractor[]>([])\r\n    const [selectedContractor, setselectedContractor] = useState<Contractor>()\r\n    const [selectedCategory, setselectedCategory] = useState<Categories>()\r\n\r\n    const handleClose = () => {\r\n        setselectedCategory(undefined)\r\n        setselectedCategory(undefined)\r\n        setupdateDialoge(false)\r\n    }\r\n    return (\r\n        <div className=\"w-full  overflow-hidden rounded-lg shadow-lg \">\r\n            {\r\n                updateDialoge &&\r\n                <UpdateContractorsModal open={updateDialoge} onClose={handleClose} category={selectedCategory} />\r\n            }\r\n            <div className=\"w-full overflow-x-auto\">\r\n                <table className=\"w-full\">\r\n                    <thead>\r\n                        <tr className=\"text-md font-semibold tracking-wide text-left text-gray-900 bg-gray-100 uppercase border-b border-gray-600 whitespace-nowrap\">\r\n                            <th className=\"px-4 py-3 uppercase\">booking id</th>\r\n                            <th className=\"px-4 py-3 uppercase\">Mobile</th>\r\n                            <th className=\"px-4 py-3 uppercase\">name</th>\r\n                            <th className=\"px-4 py-3 uppercase\">booked by</th>\r\n                            <th className=\"px-4 py-3 uppercase\">booker Mobile Number</th>\r\n                            <th className=\"px-4 py-3 uppercase\">cleaner</th>\r\n                            <th className=\"px-4 py-3 uppercase\">driver Name</th>\r\n                            <th className=\"px-4 py-3 uppercase\">function</th>\r\n                            <th className=\"px-4 py-3 uppercase\">head Mobile Number</th>\r\n                            <th className=\"px-4 py-3 uppercase\">head Name</th>\r\n                            <th className=\"px-4 py-3 uppercase\">PAX</th>\r\n                            <th className=\"px-4 py-3 uppercase\">special Instruction</th>\r\n                            <th className=\"px-4 py-3 uppercase\">vehicle Number</th>\r\n                            <th className=\"px-4 py-3 uppercase\">venue</th>\r\n                            <th className=\"px-4 py-3 uppercase\">words</th>\r\n                            <th className=\"px-4 py-3 uppercase\">function date</th>\r\n                            <th className=\"px-4 py-3 uppercase\">service time</th>\r\n                            <th className=\"px-4 py-3 uppercase\">departure date</th>\r\n                            <th className=\"px-4 py-3 uppercase\">departure time</th>\r\n                            <th className=\"px-4 py-3 uppercase\">actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className=\"bg-white whitespace-nowrap\">\r\n                        {\r\n                            menues.map((val, index) => (\r\n                                <tr className=\"text-gray-700\" key={index}>\r\n                                    <td className=\"px-4 py-3 border\">\r\n                                        {val.bookingId}\r\n                                    </td>\r\n                                    <EditAbleColumns val={val} />\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { SeniorClerkTable }\r\ninterface EditAbleColumnsProp {\r\n    val: IMenue\r\n}\r\nconst EditAbleColumns = ({ val }: EditAbleColumnsProp) => {\r\n    const [update, setupdate] = useState(false)\r\n    const [data, setData] = useState(val)\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n        const { name, value } = e.target\r\n        console.log(value)\r\n        setData({\r\n            ...data,\r\n            [name]: value\r\n        })\r\n    }\r\n    const handleUpdate = async () => {\r\n        try {\r\n            let _departureTime = data.departureTime\r\n            if (data?.departureTime && !data.departureTime.toString().includes(\"Z\")) {\r\n                const _departureHourMinute = data.departureTime.split(\":\")\r\n                _departureTime = updateDateWithHourAndMinute(new Date(data.departureDate), Number(_departureHourMinute[0]), Number(_departureHourMinute[1]))\r\n            }\r\n\r\n\r\n            // \r\n            let _serviceTime = data.serviceTime\r\n            if (data?.serviceTime && !data.serviceTime.toString().includes(\"Z\")) {\r\n                const _serviceHourMinute = data.serviceTime.split(\":\")\r\n                _serviceTime = updateDateWithHourAndMinute(new Date(data.functionDate), Number(_serviceHourMinute[0]), Number(_serviceHourMinute[1]))\r\n            }\r\n            await updateSeniorClekMenueApi({\r\n                data: {\r\n                    bookingId: data.bookingId,\r\n                    id: data.id,\r\n                    mobile: data.mobile,\r\n                    name: data.name,\r\n                    bookedBy: data.bookedBy,\r\n                    bookerMobileNumber: data.bookerMobileNumber,\r\n                    cleaner: data.cleaner,\r\n                    driverName: data.driverName,\r\n                    function: data.function,\r\n                    headMobileNumber: data.headMobileNumber,\r\n                    headName: data.headName,\r\n                    PAX: data.PAX,\r\n                    specialInstruction: data.specialInstruction,\r\n                    vehicleNumber: data.vehicleNumber,\r\n                    venue: data.venue,\r\n                    words: data.words,\r\n                    functionDate: new Date(data.functionDate),\r\n                    serviceTime: _serviceTime,\r\n                    departureTime: _departureTime,\r\n                    departureDate: new Date(data.departureDate)\r\n                }\r\n            })\r\n            alert(\"Updated Successfully!\")\r\n        } catch (error: any) {\r\n            const err = handleApiErrors(error)\r\n            alert(err)\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    update ?\r\n                        <Input name='mobile' value={data.mobile} onChange={handleChange} />\r\n                        :\r\n                        data.mobile\r\n                }\r\n            </td>\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    update ?\r\n                        <Input name='name' value={data.name} onChange={handleChange} />\r\n                        :\r\n                        data.name\r\n                }\r\n            </td>\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    update ?\r\n                        <Input name='bookedBy' value={data.bookedBy} onChange={handleChange} />\r\n                        :\r\n                        data.bookedBy\r\n                }\r\n            </td>\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    update ?\r\n                        <Input name='bookerMobileNumber' value={data.bookerMobileNumber} onChange={handleChange} />\r\n                        :\r\n                        data.bookerMobileNumber\r\n                }\r\n            </td>\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    data.cleaner\r\n                }\r\n            </td>\r\n\r\n\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    data.driverName\r\n                }\r\n            </td>\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    update ?\r\n                        <Select options={Object.values(functionsConstants).map(v => ({ content: v, value: v }))} name='function' value={data.function} onChange={handleChange} />\r\n                        :\r\n                        data.function\r\n                }\r\n            </td>\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    data.headMobileNumber\r\n                }\r\n            </td>\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    data.headName\r\n                }\r\n            </td>\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    update ?\r\n                        <Input name='PAX' value={data.PAX} onChange={handleChange} />\r\n                        :\r\n                        data.PAX\r\n                }\r\n            </td>\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    update ?\r\n                        <Input name='specialInstruction' value={data.specialInstruction} onChange={handleChange} />\r\n                        :\r\n                        data.specialInstruction\r\n                }\r\n            </td>\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    data.vehicleNumber\r\n                }\r\n            </td>\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    update ?\r\n                        <Input name='venue' value={data.venue} onChange={handleChange} />\r\n                        :\r\n                        data.venue\r\n                }\r\n            </td>\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    update ?\r\n                        <Input name='words' value={data.words} onChange={handleChange} />\r\n                        :\r\n                        data.words\r\n                }\r\n            </td>\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    update ?\r\n                        <Input type='date' name='functionDate' value={typeof data.functionDate === \"string\" ? data.functionDate : ISODateIntoLocalDate(data.functionDate)} onChange={handleChange} />\r\n                        :\r\n                        new Date(data.functionDate).toLocaleDateString()\r\n                }\r\n            </td>\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    update ?\r\n                        <Input type='time' name='serviceTime' value={data.serviceTime} onChange={handleChange} />\r\n                        :\r\n                        new Date(data.serviceTime).toLocaleTimeString()\r\n                }\r\n            </td>\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    update ?\r\n                        <Input type='date' name='departureDate' value={data.departureDate} onChange={handleChange} />\r\n                        :\r\n                        new Date(data.departureDate).toLocaleDateString()\r\n                }\r\n            </td>\r\n            <td className=\"px-4 py-3 border\">\r\n                {\r\n                    update ?\r\n                        <Input type='time' name='departureTime' value={data.departureTime} onChange={handleChange} />\r\n                        :\r\n                        new Date(data.departureTime).toLocaleTimeString()\r\n                }\r\n            </td>\r\n            <td className=\"px-4 py-3 border space-x-3\">\r\n                <Button onClick={() => {\r\n                    setupdate(!update)\r\n                }} title=\"Edit\" />\r\n                <Button title=\"Update\" onClick={handleUpdate} disabled={!update} />\r\n            </td>\r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\orderpage\\services.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\orderpage\\UploadMenueExcelFile.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\reportPage\\ContractorSearch.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\reportPage\\ContractorSearchTable.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\reportPage\\DateSearch.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\reportPage\\utils.ts",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\reportPage\\WageSearch.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\reportPage\\WageSearchTable.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Select\\index.tsx",[],[],"C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Wage\\WageMenueLayout.tsx",["375"],[],"import { updateWageCategory } from '@/providers/apis';\r\nimport { convertExcelToJson } from '@/utils/convertExcelToJson';\r\nimport { handleApiErrors } from '@/utils/handleapierrors';\r\nimport { Categories, Contractor, Menue, Places } from '@prisma/client';\r\nimport React, { useState } from 'react'\r\nimport { Button } from '../Button/Button';\r\nimport { Header } from '../Header/Header';\r\nimport Input from '../Inputs/Input';\r\nimport { Select } from '../Select';\r\nimport { createPlacesApi, getAllPlacesApi } from '@/providers/apis/places';\r\nimport { TopPrintSection } from '../menueprintpage/TopPrintSection';\r\n\r\ntype IMenue = (Menue & {\r\n    Categories: (Categories & {\r\n        contractor: Contractor | null;\r\n    })[];\r\n})\r\n\r\nconst WageMenueLayout = ({ menue }: { menue: IMenue }) => {\r\n    const [printing, setprinting] = useState(false)\r\n    const [placesValues, setplacesValues] = useState<{ name: string, value: string }[]>([])\r\n    const [data, setdata] = useState<IMenue>(menue)\r\n    const handleChangeCalculation = (cindex: number, value: string, key: \"minus\" | \"plus\" | \"placevalue\") => {\r\n        const _cat = [...data.Categories].map((c, ci) => ci === cindex ? { ...c, [key]: value } : c)\r\n        setdata((prev) => ({ ...prev, Categories: _cat }))\r\n    }\r\n    const getTotalwages = () => {\r\n        let sum = 0;\r\n        data.Categories.forEach(c => {\r\n            if (c.contractor?.wage !== undefined) {\r\n                sum += c.contractor.wage\r\n            }\r\n        })\r\n        return sum;\r\n    }\r\n    const getPluses = () => {\r\n        let sum = 0;\r\n        data.Categories.forEach(c => {\r\n            if (c.plus !== undefined) {\r\n                sum += Math.abs(Number(c.plus))\r\n            }\r\n        })\r\n        return sum;\r\n    }\r\n    const getMinuses = () => {\r\n        let sum = 0;\r\n        data.Categories.forEach(c => {\r\n            if (c.minus !== undefined) {\r\n                sum += Math.abs(Number(c.minus))\r\n            }\r\n        })\r\n        return sum;\r\n    }\r\n    const getFinalTotal = () => {\r\n\r\n        let sum = 0;\r\n        data.Categories.forEach(c => {\r\n            if (c.minus !== undefined) {\r\n                sum += ((Number(c.contractor?.wage) * Number(c.placevalue))) + Number(c.plus) - Number(c.minus) ? ((Number(c.contractor?.wage) * Number(c.placevalue))) + Number(c.plus) - Number(c.minus) : 0\r\n            }\r\n        })\r\n        return sum;\r\n    }\r\n    const handleUpdateCategories = async () => {\r\n        try {\r\n            await updateWageCategory({\r\n                categories: data.Categories\r\n            })\r\n            alert(\"updated successfully!\")\r\n        } catch (error: any) {\r\n            const err = handleApiErrors(error)\r\n            alert(err)\r\n        }\r\n    }\r\n    const handleUploadPlacesValues = async (json: Omit<Places, \"id\">[]) => {\r\n        try {\r\n            await createPlacesApi({\r\n                places: json\r\n            })\r\n            alert(\"uploaded successfull!\")\r\n        } catch (error: any) {\r\n            const err = handleApiErrors(error)\r\n            alert(err)\r\n        }\r\n        setplacesValues(json)\r\n    }\r\n    const getAllPlaces = async () => {\r\n        try {\r\n            const res = await getAllPlacesApi()\r\n            setplacesValues(res.data.places)\r\n        } catch (error: any) {\r\n            const err = handleApiErrors(error)\r\n            alert(err)\r\n        }\r\n    }\r\n    React.useEffect(() => {\r\n        getAllPlaces()\r\n    }, [])\r\n    React.useEffect(() => {\r\n        if (printing) {\r\n            window.print()\r\n        }\r\n    }, [printing])\r\n    return (\r\n        <div>\r\n            {\r\n                !printing &&\r\n                <Header className='bg-sky-500' />\r\n            }\r\n            <TopPrintSection menue={menue} />\r\n            {\r\n                !printing &&\r\n                <div className='p-4 bg-gray-100'>\r\n                    <Input label='Upload Places' labelClassName='!text-black' type=\"file\" onChange={(e) => {\r\n                        if (!e.target.files) {\r\n                            return;\r\n                        }\r\n                        const file = e.target.files[0]\r\n                        convertExcelToJson({\r\n                            callback: handleUploadPlacesValues,\r\n                            file: file\r\n                        })\r\n                        e.target.value = \"\"\r\n                    }}\r\n                    />\r\n                </div>\r\n            }\r\n            <div className=\"w-full mb-8 overflow-hidden bg-white\">\r\n                <div className=\"w-full overflow-x-auto\">\r\n                    <table className=\"w-full\">\r\n                        <thead>\r\n                            <tr className=\"text-md font-semibold tracking-wide text-left text-gray-900 uppercase border-b border-2 border-black\">\r\n                                <th className=\"px-4 py-3 uppercase  border-2 border-black  text-center\">s.no</th>\r\n                                <th className=\"px-4 py-3 uppercase  border-2 border-black  text-center\">NAME OF staff</th>\r\n                                <th className=\"px-4 py-3 uppercase  border-2 border-black  text-center\">wage</th>\r\n                                <th className=\"px-4 py-3 uppercase  border-2 border-black  text-center\">value of place</th>\r\n                                <th className=\"px-4 py-3 uppercase  border-2 border-black  text-center\">\r\n                                    Bonus\r\n                                    <tr className='flex justify-between text-md font-semibold tracking-wide text-left text-gray-900  uppercase '>\r\n                                        <th className='px-4 py-3 uppercase text-center'>+</th>\r\n                                        <th className='px-4 py-3 uppercase text-center'>-</th>\r\n                                    </tr>\r\n                                </th>\r\n                                <th className=\"px-4 py-3 uppercase text-center\">\r\n                                    TOTAL\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className=\"bg-white font-semibold\">\r\n                            {\r\n                                data.Categories.map((c, ci) => (\r\n                                    <tr className=\"text-gray-700\">\r\n                                        <td className=\"px-1 py-3 border-2 border-black  text-center\">\r\n                                            {ci + 1}\r\n                                        </td>\r\n                                        <td className=\"px-1 py-3 border-2 border-black  \">\r\n                                            {c.contractor?.name}\r\n                                        </td>\r\n                                        <td className=\"px-1 py-3 border-2 border-black  text-center\">\r\n                                            {c.contractor?.wage ? c.contractor.wage : \"0\"}\r\n                                        </td>\r\n                                        <td className=\"px-1 py-3 border-2 border-black  text-center \">\r\n                                            <div className='w-full'>\r\n                                                {\r\n                                                    !printing ?\r\n                                                        <Input className='!w-[100px] ' type='number' value={c.placevalue !== null ? c.placevalue : \"0\"} />\r\n                                                        :\r\n                                                        c.placevalue !== null ? c.placevalue : \"0\"\r\n                                                }\r\n                                            </div>\r\n                                            <div className='flex items-center space-x-3 mt-4'>\r\n                                                {\r\n                                                    !printing &&\r\n                                                    <Select\r\n                                                        value={c.placevalue !== null ? c.placevalue : \"\"}\r\n                                                        onChange={(e) => {\r\n                                                            handleChangeCalculation(ci, e.target.value, \"placevalue\")\r\n                                                        }}\r\n                                                        label='Select Place' labelClassName='!text-black' className='!text-black !w-[150px]' options={[...placesValues.map(v => ({ content: `${v.name}: ${v.value}`, value: v.value }))]}\r\n                                                    />\r\n                                                }\r\n                                            </div>\r\n                                        </td>\r\n                                        <td className=\"px-4 py-3 border-2 border-black  text-center\">\r\n                                            <tr className=\"text-gray-700 flex justify-between\">\r\n                                                <td className=\"px-4 py-3  text-center\">\r\n                                                    {\r\n                                                        !printing ?\r\n                                                            <Input type='number' onChange={(e) => {\r\n                                                                handleChangeCalculation(ci, e.target.value, \"plus\")\r\n                                                            }} className='!w-[100px] ' value={c.plus !== null ? c.plus : \"0\"} />\r\n                                                            :\r\n                                                            c.plus !== null ? c.plus : \"0\"\r\n                                                    }\r\n                                                </td>\r\n                                                <td className=\"px-4 py-3  text-center\">\r\n                                                    {\r\n                                                        !printing ?\r\n                                                            <Input type='number' onChange={(e) => {\r\n                                                                handleChangeCalculation(ci, e.target.value, \"minus\")\r\n                                                            }} className='!w-[100px] ' value={c.minus !== null ? c.minus : \"0\"}\r\n                                                            />\r\n                                                            :\r\n                                                            c.minus !== null ? c.minus : \"0\"\r\n                                                    }\r\n                                                </td>\r\n                                            </tr>\r\n                                        </td>\r\n                                        <td className=\"px-4 py-3 border-2 border-black  text-center\">\r\n                                            {((Number(c.contractor?.wage) * Number(c.placevalue))) + Number(c.plus) - Number(c.minus)}\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            <tr className=\"text-gray-700 font-bold\">\r\n                                <td className=\"px-4 py-3 border-2 border-black  text-center\">\r\n\r\n                                </td>\r\n                                <td className=\"px-1 py-3 border-2 border-black  font-bold\">\r\n                                    Total value:\r\n                                </td>\r\n                                <td className=\"px-4 py-3 border-2 border-black  text-center\">\r\n                                    {getTotalwages()}\r\n                                </td>\r\n                                <td className=\"px-4 py-3 border-2 border-black  text-center\">\r\n\r\n                                </td>\r\n                                <td className=\"px-4 py-3 border-2 border-black  text-center\">\r\n                                    <tr className=\"text-gray-700 flex justify-between\">\r\n                                        <td className=\"px-4 py-3  text-center\">\r\n                                            {getPluses()}\r\n                                        </td>\r\n                                        <td className=\"px-4 py-3  text-center\">\r\n                                            {getMinuses()}\r\n                                        </td>\r\n                                    </tr>\r\n                                </td>\r\n                                <td className=\"px-4 py-3 border-2 border-black  text-center\">\r\n                                    {getFinalTotal()}\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <h1 className='text-end font-semibold text-lg p-3 underline underline-offset-4'>Total payable amount : {getFinalTotal()}</h1>\r\n                <h1 className='text-xl text-center tracking-tight mb-10'>\r\n                    Thank You 👏\r\n                </h1>\r\n            </div>\r\n            {\r\n                !printing &&\r\n                <div className='w-full p-2'>\r\n                    <Button className=' w-full m-auto' title='UPDATE' onClick={handleUpdateCategories} />\r\n                    <Button className='mt-4 w-full m-auto' title='PRINT' onClick={async () => {\r\n                        setprinting(true)\r\n                    }} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { WageMenueLayout }","C:\\Users\\hp\\Desktop\\food-web-v2\\components\\Wage\\WageTable.tsx",["376"],[],"import React, { useEffect, useState } from 'react'\r\nimport { Menue, Categories, Contractor } from '@prisma/client'\r\nimport Dialoge from '@mui/material/Dialog'\r\nimport { handleApiErrors } from '@/utils/handleapierrors'\r\nimport { getAvailableContractorsWithItem, updateCategoryFinalWage, updateCatgoryContractor } from '@/providers/apis'\r\nimport DialogTitle from '@mui/material/DialogTitle'\r\nimport CheckBox from '@mui/material/Checkbox'\r\nimport { DialogActions } from '@mui/material'\r\nimport { Button } from '../Button/Button'\r\nimport Input from '../Inputs/Input'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport EditIcon from '@mui/icons-material/Edit';\r\ninterface ICategories extends Categories {\r\n    contractor?: Contractor\r\n}\r\ninterface IMenue extends Menue {\r\n    Categories?: ICategories[]\r\n}\r\ninterface MenueTableProp {\r\n    menues: IMenue[]\r\n}\r\ninterface IModal {\r\n    open: boolean\r\n    onClose: () => void\r\n    category?: Categories\r\n}\r\nconst UpdateContractorsModal = ({ onClose, open, category }: IModal) => {\r\n    const [contractors, setcontractors] = useState<Contractor[]>([])\r\n    const [selectedContractor, setselectedContractor] = useState<Contractor>()\r\n    const getContractores = async () => {\r\n        try {\r\n            const res = await getAvailableContractorsWithItem({ item: category?.itemName! })\r\n            setcontractors(res.data.contractors)\r\n            console.log({ setselectedContractores: res.data.contractors })\r\n        } catch (error: any) {\r\n            const err = handleApiErrors(error)\r\n            alert(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (category?.itemName) {\r\n            getContractores()\r\n        }\r\n    }, [category?.itemName])\r\n    const handleUpdate = async () => {\r\n        if (!selectedContractor) {\r\n            return alert(\"Kindly select one contractor.\")\r\n        }\r\n        if (!category) {\r\n            return;\r\n        }\r\n        try {\r\n            const res = await updateCatgoryContractor({\r\n                categoryId: category.id,\r\n                contractorid: selectedContractor.id\r\n            })\r\n            alert(res.data.msg)\r\n        } catch (error: any) {\r\n            const err = handleApiErrors(error)\r\n            alert(err)\r\n        }\r\n    }\r\n    return (\r\n        <Dialoge open={open} maxWidth=\"md\" fullWidth onClose={onClose}>\r\n            <DialogTitle>\r\n                Available Contractors\r\n            </DialogTitle>\r\n            {\r\n                contractors.map((c, ci) => (\r\n                    <div key={ci} className=\"flex items-center space-x-2\">\r\n                        <CheckBox checked={c.id === selectedContractor?.id} onChange={() => {\r\n                            setselectedContractor(c)\r\n                        }} />\r\n                        <h1 className='text-lg font-bold'>{c.name}</h1>\r\n                    </div>\r\n                ))\r\n            }\r\n            <DialogActions>\r\n                <div className='flex space-x-2'>\r\n                    <Button title='Cancel' onClick={onClose} />\r\n                    <Button title='Update' onClick={handleUpdate} />\r\n                </div>\r\n            </DialogActions>\r\n        </Dialoge>\r\n    )\r\n}\r\nconst WageTable = ({ menues }: MenueTableProp) => {\r\n    const [updateDialoge, setupdateDialoge] = useState(false)\r\n    const [selectedContractores, setselectedContractores] = useState<Contractor[]>([])\r\n    const [selectedContractor, setselectedContractor] = useState<Contractor>()\r\n    const [selectedCategory, setselectedCategory] = useState<Categories>()\r\n\r\n    const handleClose = () => {\r\n        setselectedCategory(undefined)\r\n        setselectedCategory(undefined)\r\n        setupdateDialoge(false)\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-full mb-8 overflow-hidden rounded-lg shadow-lg\">\r\n            {\r\n                updateDialoge &&\r\n                <UpdateContractorsModal open={updateDialoge} onClose={handleClose} category={selectedCategory} />\r\n            }\r\n            <div className=\"w-full overflow-x-auto\">\r\n                <table className=\"w-full\">\r\n                    <thead>\r\n                        <tr className=\"text-md font-semibold tracking-wide text-left text-gray-900 bg-gray-100 uppercase border-b border-gray-600 whitespace-nowrap\">\r\n                            <th className=\"px-4 py-3 uppercase\">Booking ID</th>\r\n                            <th className=\"px-4 py-3 uppercase\">Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className=\"bg-white whitespace-nowrap\">\r\n                        {\r\n                            menues.map((val, index) => (\r\n                                <tr className=\"text-gray-700\" key={index}>\r\n                                    <td className=\"px-4 py-3 border\">\r\n                                        {val.bookingId}\r\n                                    </td>\r\n                                    <td className=\"px-4 py-3 border space-y-4 \">\r\n                                        <span onClick={() => {\r\n                                            window.location.href = `/wage/edit/${val.id}`\r\n                                        }} className='cursor-pointer underline text-blue-700 underline-offset-4 '>Edit</span>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\nconst Record = ({ cat: c }: { cat: ICategories }) => {\r\n    const [finalWage, setfinalWage] = useState(c.finalWage ? c.finalWage : \"\")\r\n    const [update, setupdate] = useState(false)\r\n    const handleUpdate = () => {\r\n        setupdate(!update)\r\n    }\r\n    const onUpdate = async () => {\r\n        try {\r\n            const res = await updateCategoryFinalWage({\r\n                categoryId: c.id,\r\n                finalWage: finalWage\r\n            })\r\n            alert(res.data.msg)\r\n        } catch (error: any) {\r\n            const err = handleApiErrors(error)\r\n            alert(err)\r\n        }\r\n    }\r\n    return (\r\n        <tr className=\"text-gray-700\">\r\n            <td className=\"px-4 py-3 border\">\r\n                {c.contractor?.name}\r\n            </td>\r\n            <td className=\"px-4 py-3 border\">\r\n                {c.contractor?.wage}\r\n            </td>\r\n            <td className=\"px-4 py-3 border flex items-center space-x-2\">\r\n                {\r\n                    !update ?\r\n                        c.finalWage\r\n                        :\r\n                        <Input onChange={(e) => { setfinalWage(e.target.value) }} type='number' value={finalWage ? finalWage : \"\"} />\r\n                }\r\n                {\r\n                    !update ?\r\n                        <IconButton onClick={handleUpdate} className=\"ml-5 border \">\r\n                            <EditIcon className='text-blue-700' />\r\n                        </IconButton> :\r\n                        <>\r\n                            <span onClick={onUpdate} className='bg-gray-100 p-2 uppercase border cursor-pointer'>update</span>\r\n                            <span onClick={handleUpdate} className='bg-gray-100 p-2 uppercase border cursor-pointer'>cancel</span>\r\n                        </>\r\n                }\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\nexport { WageTable }\r\n\r\n\r\n","C:\\Users\\hp\\Desktop\\food-web-v2\\lib\\prismaclient.ts",[],[],{"ruleId":"377","severity":1,"message":"378","line":48,"column":8,"nodeType":"379","endLine":48,"endColumn":10,"suggestions":"380"},{"ruleId":"377","severity":1,"message":"378","line":51,"column":8,"nodeType":"379","endLine":51,"endColumn":32,"suggestions":"381"},{"ruleId":"377","severity":1,"message":"382","line":33,"column":8,"nodeType":"379","endLine":33,"endColumn":12,"suggestions":"383"},{"ruleId":"377","severity":1,"message":"378","line":45,"column":8,"nodeType":"379","endLine":45,"endColumn":10,"suggestions":"384"},{"ruleId":"385","severity":2,"message":"386","line":162,"column":17,"nodeType":"387","messageId":"388","endLine":174,"endColumn":23},{"ruleId":"377","severity":1,"message":"389","line":324,"column":6,"nodeType":"379","endLine":324,"endColumn":17,"suggestions":"390"},{"ruleId":"377","severity":1,"message":"391","line":34,"column":8,"nodeType":"379","endLine":34,"endColumn":12,"suggestions":"392"},{"ruleId":"385","severity":2,"message":"386","line":54,"column":41,"nodeType":"387","messageId":"388","endLine":54,"endColumn":66},{"ruleId":"393","severity":1,"message":"394","line":37,"column":21,"nodeType":"395","endLine":37,"endColumn":91},{"ruleId":"396","severity":1,"message":"397","line":37,"column":21,"nodeType":"395","endLine":37,"endColumn":91},{"ruleId":"385","severity":2,"message":"386","line":77,"column":37,"nodeType":"387","messageId":"388","endLine":90,"endColumn":42},{"ruleId":"377","severity":1,"message":"398","line":50,"column":8,"nodeType":"379","endLine":50,"endColumn":28,"suggestions":"399"},{"ruleId":"385","severity":2,"message":"386","line":152,"column":37,"nodeType":"387","messageId":"388","endLine":212,"endColumn":42},{"ruleId":"377","severity":1,"message":"398","line":44,"column":8,"nodeType":"379","endLine":44,"endColumn":28,"suggestions":"400"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMenueData'. Either include it or remove the dependency array.","ArrayExpression",["401"],["402"],"React Hook useEffect has a missing dependency: 'getsinglemenue'. Either include it or remove the dependency array.",["403"],["404"],"react/jsx-key","Missing \"key\" prop for element in iterator","JSXElement","missingIterKey","React Hook useEffect has an unnecessary dependency: 'itemsData'. Either exclude it or remove the dependency array. Outer scope values like 'itemsData' aren't valid dependencies because mutating them doesn't re-render the component.",["405"],"React Hook React.useEffect has a missing dependency: 'getsinglemenue'. Either include it or remove the dependency array.",["406"],"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Use `<Image />` from `next/image` instead to utilize Image Optimization. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'getContractores'. Either include it or remove the dependency array.",["407"],["408"],{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},{"desc":"413","fix":"414"},{"desc":"409","fix":"415"},{"desc":"416","fix":"417"},{"desc":"413","fix":"418"},{"desc":"419","fix":"420"},{"desc":"419","fix":"421"},"Update the dependencies array to be: [getMenueData]",{"range":"422","text":"423"},"Update the dependencies array to be: [getMenueData, menueState.refetchData]",{"range":"424","text":"425"},"Update the dependencies array to be: [getsinglemenue, id]",{"range":"426","text":"427"},{"range":"428","text":"423"},"Update the dependencies array to be: []",{"range":"429","text":"430"},{"range":"431","text":"427"},"Update the dependencies array to be: [category?.itemName, getContractores]",{"range":"432","text":"433"},{"range":"434","text":"433"},[2362,2364],"[getMenueData]",[2421,2445],"[getMenueData, menueState.refetchData]",[1082,1086],"[getsinglemenue, id]",[2243,2245],[13654,13665],"[]",[1010,1014],[2007,2027],"[category?.itemName, getContractores]",[1689,1709]]